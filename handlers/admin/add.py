
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ContentType, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.utils.callback_data import CallbackData
from keyboards.default.markups import *
from states import ProductState, CategoryState
from aiogram.types.chat import ChatActions
from handlers.user.menu import settings
from loader import dp, db, bot, logger
from utils.db.models import –°ategories, Products
from filters import IsAdmin
import ast


category_cb = CallbackData('category', 'id', 'action')
product_cb = CallbackData('product', 'id', 'action')

add_product = '‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä'
delete_category = 'üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é'

# –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ "‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"
@dp.message_handler(IsAdmin(), text=settings)
async def process_settings(message: Message):

    markup = InlineKeyboardMarkup()
    result = db.db_session.query(–°ategories).all()
    for categorie in result:
        markup.add(InlineKeyboardButton(
            categorie.title, callback_data=category_cb.new(id=categorie.id, action='view')))

    markup.add(InlineKeyboardButton(
        '+ –î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é', callback_data='add_category'))

    await message.answer('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:', reply_markup=markup)


# –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@dp.callback_query_handler(IsAdmin(), category_cb.filter(action='view'))
async def category_callback_handler(query: CallbackQuery, callback_data: dict, state: FSMContext):

    category_id = callback_data['id']
    # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products = db.db_session.query(Products).\
        filter(Products.categori_id == category_id).\
        all()
    await query.message.delete()
    await query.answer('–í—Å—ñ –¥–æ–¥–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –≤ —Ü—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.')
    await state.update_data(category_index=category_id)
    await show_products(query.message, products)


# –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@dp.callback_query_handler(IsAdmin(), text='add_category')
async def add_category_callback_handler(query: CallbackQuery):
    await query.message.delete()
    await query.message.answer('–Ø–∫–∞ –Ω–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó?', reply_markup=menu_markup())
    await CategoryState.title.set()

# –í–≤–µ—Å—Ç–∏ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(IsAdmin(), state=CategoryState.title)
async def set_category_title_handler(message: Message, state: FSMContext):
    category = message.text
    logger.info(
        f"Admin id - {message.from_user.id} name - {message.from_user.first_name} add category {category}")
    db.db_session.add(–°ategories(title=category))
    db.db_session.commit()
    await state.finish()
    await process_settings(message)

# –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@dp.message_handler(IsAdmin(), text=delete_category)
async def delete_category_handler(message: Message, state: FSMContext):

    async with state.proxy() as data:
        if 'category_index' in data.keys():
            logger.info(
                f"Admin id - {message.from_user.id} name - {message.from_user.first_name} add category {message.text}")
            idx = int(data['category_index'])
            # –ë–µ—Ä–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ id
            category = db.db_session.query(–°ategories).filter_by(id=idx).first()
            db.db_session.delete(category)
            db.db_session.commit()
            await message.answer('–ì–æ—Ç–æ–≤–æ!', reply_markup=menu_markup())
            await process_settings(message)


# –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@dp.message_handler(IsAdmin(), text=add_product)
async def process_add_product(message: Message):
    await ProductState.title.set()
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(cancel_message)
    await message.answer('–Ø–∫–∞ –Ω–∞–∑–≤–∞?', reply_markup=markup)


# –ù–∞–∂–∞–ª –Ω–∞ –û–¢–ú–ï–ù–ò–¢–¨ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(IsAdmin(), text=cancel_message, state=ProductState.title)
async def process_cancel(message: Message, state: FSMContext):
    await message.answer('–û–∫, –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ!', reply_markup=menu_markup())
    await state.finish()
    await process_settings(message)


# –ù–∞–∂–∞–ª –Ω–∞ –û–¢–ú–ï–ù–ò–¢–¨ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(IsAdmin(), text=back_message, state=ProductState.title)
async def process_title_back(message: Message, state: FSMContext):
    await process_add_product(message)


# –í–≤—Å–µ–ª –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(IsAdmin(), state=ProductState.title)
async def process_title(message: Message, state: FSMContext):

    async with state.proxy() as data:
        data['title'] = message.text
        data['additives'] = {}
        data['additive_queue'] = []

    await ProductState.next()
    await message.answer('–Ø–∫–∏–π –æ–ø–∏—Å?', reply_markup=back_markup())


# –ù–∞–∂–∞–ª –Ω–∞ –û–¢–ú–ï–ù–ò–¢–¨ –ø—Ä–∏ –≤–≤–æ–¥–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ -> –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∏–º—è —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(IsAdmin(), text=back_message, state=ProductState.body)
async def process_body_back(message: Message, state: FSMContext):

    await ProductState.title.set()

    async with state.proxy() as data:

        await message.answer(f"–ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É –∑ <b>{data['title']}</b>?", reply_markup=back_markup())


# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–∫–∏ 
@dp.message_handler(IsAdmin(), state=ProductState.body)
async def process_body(message: Message, state: FSMContext):

    async with state.proxy() as data:
        data['body'] = message.text

    await ProductState.next()
    await message.answer('–Ø–∫–µ —Ñ–æ—Ç–æ?', reply_markup=back_markup())


# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–∫–∏ 
@dp.message_handler(IsAdmin(), content_types=ContentType.PHOTO, state=ProductState.image)
async def process_image_photo(message: Message, state: FSMContext):

    fileID = message.photo[-1].file_id
    file_info = await bot.get_file(fileID)
    downloaded_file = (await bot.download_file(file_info.file_path)).read()

    async with state.proxy() as data:
        data['image'] = downloaded_file

    await ProductState.next()
    await message.answer('–Ø–∫–∞ —Ü—ñ–Ω–∞?', reply_markup=back_markup())


# –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª –Ω–µ —Ñ–æ—Ç–∫—É 
@dp.message_handler(IsAdmin(), content_types=ContentType.TEXT, state=ProductState.image)
async def process_image_url(message: Message, state: FSMContext):
    if message.text == back_message:
        await ProductState.body.set()
        async with state.proxy() as data:
            await message.answer(f"–ó–º—ñ–Ω–∏—Ç–∏ –æ–ø–∏—Å –∑ <b>{data['body']}</b>?", reply_markup=back_markup())
    else:
        await message.answer('–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É.')


# –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª –Ω–µ —Ñ–æ—Ç–∫—É -> –ø—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ
@dp.message_handler(IsAdmin(), lambda message: not message.text.isdigit(), state=ProductState.price)
async def process_price_invalid(message: Message, state: FSMContext):
    if message.text == back_message:
        await ProductState.image.set()
        async with state.proxy() as data:
            await message.answer("–ó–∞–º—ñ–Ω–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ —ñ–Ω—à–µ?", reply_markup=back_markup())
    else:
        await message.answer('–í–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É —É –≤–∏–≥–ª—è–¥—ñ —á–∏—Å–ª–∞!')


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ 
@dp.message_handler(IsAdmin(), lambda message: message.text.isdigit(), state=ProductState.price)
async def process_price(message: Message, state: FSMContext):
    async with state.proxy() as data:

        title = data['title']
        body = data['body']
        data['price'] = message.text
        price = data['price']

        await ProductState.confirm.set()
        text = f'<b>{title}</b>\n\n{body}\n\n–¶—ñ–Ω–∞: {price} ‚Ç¥'

        markup = check_markup()

        await message.answer_photo(photo=data['image'],
                                   caption=text,
                                   reply_markup=markup)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–æ–µ –ª–∏ –≤–µ—Ä–Ω–æ –ø–æ–ª–µ 
@dp.message_handler(IsAdmin(), lambda message: message.text not in [back_message, all_right_message], state=ProductState.confirm)
async def process_confirm_invalid(message: Message):
    await message.answer('–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –Ω–µ –±—É–ª–æ.')


# –ü—Ä–∏ –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–∞–∂–∞—Ç–∏–µ –ù–ê–ó–ê–î 
@dp.message_handler(IsAdmin(), text=back_message, state=ProductState.confirm)
async def process_confirm_back(message: Message, state: FSMContext):
    await ProductState.price.set()
    async with state.proxy() as data:
        now_additive = data["additive_queue"][-1]
        await ProductState.additive_price.set()
        await message.answer(f"{now_additive} –ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É –∑ <b>{data['additives'][now_additive]}</b>?", reply_markup=back_markup())


# –ü—Ä–∏ –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–∞–∂–∞—Ç–∏–µ –ü–û–¢–í–ï–†–î–ò–¢–¨ –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É 
@dp.message_handler(IsAdmin(), text=all_right_message, state=ProductState.confirm)
async def process_confirm(message: Message, state: FSMContext):

    async with state.proxy() as data:

        title = data['title']
        body = data['body']
        image = data['image']
        price = data['price']
        category_id = data['category_index']

        logger.info(
            f"Admin id - {message.from_user.id} name - {message.from_user.first_name} add product {title} into {data['category_index']}")
        produtc = Products(categori_id=category_id, title=title,
                           body=body, photo=image, price=price)
        db.db_session.add(produtc)
        db.db_session.commit()

    await state.finish()
    await message.answer('–ì–æ—Ç–æ–≤–æ!', reply_markup=ReplyKeyboardRemove())
    await process_settings(message)


# –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
@dp.callback_query_handler(IsAdmin(), product_cb.filter(action='delete'))
async def delete_product_callback_handler(query: CallbackQuery, callback_data: dict):
    product_idx = callback_data['id']
    logger.info(
        f"Admin id - {query.from_user.id} name - {query.from_user.first_name} delete product with index - {product_idx}")
    product = db.db_session.query(Products).filter_by(id=product_idx).first()
    db.db_session.delete(product)
    db.db_session.commit()
    await query.answer('–í–∏–¥–∞–ª–µ–Ω–æ!')
    await query.message.delete()

# –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã
async def show_products(m, products):
    await bot.send_chat_action(m.chat.id, ChatActions.TYPING)
    for product in products:
        text = f'<b>{product.title}</b>\n\n{product.body}\n\n'

        text += f"\n–¶—ñ–Ω–∞: {product.price} ‚Ç¥"

        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(
            'üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏', callback_data=product_cb.new(id=product.id, action='delete')))
        await m.answer_photo(photo=product.photo,
                             caption=text,
                             reply_markup=markup)

    markup = ReplyKeyboardMarkup()
    markup.add(add_product)
    markup.add(delete_category)
    markup.add(menu_message)

    await m.answer('–•–æ—á–µ—Ç–µ —â–æ—Å—å –¥–æ–¥–∞—Ç–∏ —á–∏ –≤–∏–¥–∞–ª–∏—Ç–∏?', reply_markup=markup)
