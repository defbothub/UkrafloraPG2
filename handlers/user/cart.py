from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from keyboards.inline.products_from_cart import product_markup, product_cb
from keyboards.default.markups import *
from .menu import user_menu
from aiogram.types.chat import ChatActions
from states import CheckoutState
from loader import dp, db, bot, logger
from filters import IsUser
from .menu import cart
from handlers.user.menu import markup_user
from utils.db.models import Products, Ordered_products, Orders
from sqlalchemy.orm import joinedload
from data.config import managers

'''–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É'''


@dp.message_handler(IsUser(), text=cart)
async def process_cart(message: Message, state: FSMContext):
    logger.info(
        f"User id - {message.from_user.id} name - {message.from_user.first_name} showed all products in cart")
    # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∑–∞–∫–∞–∑ –ø–æ tg_uid –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
    order = db.db_session.query(Orders).filter_by(
        tg_uid=message.chat.id).filter(Orders.is_orderd == False).first()
    if order == None:
        ordered_products = []
        await message.answer('–í–∞—à –∫–æ—à–∏–∫ —â–µ –ø–æ—Ä–æ–∂–Ω—ñ–π.\n–¢–∏—Å–Ω—ñ—Ç—å üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω, —â–æ–± –æ–±—Ä–∞—Ç–∏ —Ç–æ–≤–∞—Ä üëá',
                             reply_markup=markup_user)
    else:
        # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –æ—Ä–µ–¥—Ä—É
        ordered_products = db.db_session.query(Ordered_products, Orders) \
            .join(Orders, Ordered_products.order_id == Orders.id) \
            .filter(Orders.id == order.id) \
            .options(joinedload(Ordered_products.product)) \
            .all()
        await bot.send_chat_action(message.chat.id, ChatActions.TYPING)
        async with state.proxy() as data:
            data['products'] = {}
        order_cost = 0
        for orderd_product, _ in ordered_products:
            # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É
            product = db.db_session.query(Products).filter_by(
                id=orderd_product.product_id).first()

            if product == None:
                db.db_session.delete(orderd_product)
                db.db_session.commit()
            else:
                # —Å—á–∏—Ç–∞–µ–º —Ü–µ–Ω—É –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                order_cost += product.price

                async with state.proxy() as data:
                    data['products'][product.id] = (
                        product, orderd_product, order)
                markup = product_markup(product.id, orderd_product.quantity)
                text = f'{product.title}\n\n{product.body}\n\n–¶—ñ–Ω–∞: -  {product.price} ‚Ç¥.'

                await message.answer_photo(photo=product.photo,
                                           caption=text,
                                           reply_markup=markup)
        if order_cost != 0:
            await message.answer('–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è?',
                                 reply_markup=cart_markup())

'''–í –∫–æ—Ä–∑–∏–Ω–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Ü–∏—Ñ—Ä—É –ø–æ–¥ —Ç–æ–≤–∞—Ä–æ–º'''


@dp.callback_query_handler(IsUser(), product_cb.filter(action='count'))
async def product_count_callback_handler(query: CallbackQuery, callback_data: dict, state: FSMContext):
    idx = callback_data['id']
    async with state.proxy() as data:
        _, orderd_product, _ = data['products'][int(idx)]
        if 'products' not in data.keys():
            await process_cart(query.message, state)
        else:
            await query.answer('–ö—ñ–ª—å–∫—ñ—Å—Ç—å - ' + str(orderd_product.quantity))
    db.db_session.commit()

'''–í –∫–æ—Ä–∑–∏–Ω–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∏–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ–¥ —Ç–æ–≤–∞—Ä–æ–º'''


@dp.callback_query_handler(IsUser(), product_cb.filter(action='increase'))
@dp.callback_query_handler(IsUser(), product_cb.filter(action='decrease'))
async def product_callback_handler(query: CallbackQuery, callback_data: dict, state: FSMContext):
    id = callback_data['id']
    action = callback_data['action']
    async with state.proxy() as data:
        if 'products' not in data.keys():
            await process_cart(query.message, state)
        else:
            _, orderd_product, _ = data['products'][int(id)]
            '''–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª-–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞'''
            orderd_product = db.db_session.query(
                Ordered_products).filter_by(id=orderd_product.id).first()
            orderd_product.quantity += 1 if 'increase' == action else -1
            db.db_session.commit()
            if orderd_product.quantity == 0:
                db.db_session.delete(orderd_product)
                db.db_session.commit()
                await query.message.delete()
            else:
                await query.message.edit_reply_markup(product_markup(id, orderd_product.quantity))
    db.db_session.commit()
    orderlen = db.db_session.query(Ordered_products).filter_by(
        id=orderd_product.id).count()
    if orderlen == 0:
        await process_cart(query.message, state)

'''–í –∫–æ—Ä–∑–∏–Ω–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –û–§–û–†–ú–ò–¢–¨ –ó–ê–ö–ê–ó'''


@dp.message_handler(IsUser(), text=checkout_message)
async def process_checkout(message: Message, state: FSMContext):
    await CheckoutState.check_cart.set()
    await checkout(message, state)

'''–°—á–∏—Ç–∞–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω—É'''


async def checkout(message, state):
    answer = ''
    total_price = 0

    async with state.proxy() as data:
        for product, ordered_product, _ in data['products'].values():
            ordered_product = db.db_session.query(
                Ordered_products).filter_by(id=ordered_product.id).first()
            tp = product.price
            answer += f"<b>{product.title}</b>\n {ordered_product.quantity} —à—Ç. –ø–æ {product.price} ‚Ç¥\n"
            answer += f'<b>–†–∞–∑–æ–º - {tp * ordered_product.quantity} ‚Ç¥</b>\n'

            total_price += tp * ordered_product.quantity

    await message.answer(f'{answer}\n–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_price} ‚Ç¥',
                         reply_markup=check_markup())


'''–û—Ç—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã'''


@dp.message_handler(IsUser(), text=cancel_cart_message)
async def clear_cart(message: Message):
    logger.info(
        f"User id - {message.from_user.id} name - {message.from_user.first_name} clear a cart.")

    # –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    order = db.db_session.query(Orders).filter_by(tg_uid=message.chat.id, is_orderd=False).first()

    if order:
        # –í–∏–¥–∞–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ñ –π–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∏
        db.db_session.query(Ordered_products).filter_by(order_id=order.id).delete()
        db.db_session.delete(order)
        db.db_session.commit()
        await message.answer("–ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–∏–π.\n–¢–∏—Å–Ω—ñ—Ç—å üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏ üëá",
                             reply_markup=markup_user)
    else:
        await message.answer("–í–∞—à –∫–æ—à–∏–∫ –≤–∂–µ –ø–æ—Ä–æ–∂–Ω—ñ–π.\n–¢–∏—Å–Ω—ñ—Ç—å üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω, —â–æ–± –æ–±—Ä–∞—Ç–∏ —Ç–æ–≤–∞—Ä üëá",
                             reply_markup=markup_user)


# @dp.message_handler(IsUser(), text=cancel_cart_message)
# async def clear_cart(message: Message):
#     logger.info(
#         f"User id - {message.from_user.id} name - {message.from_user.first_name} clear a cart.")
#     order_id = db.db_session.query(Orders).filter_by(tg_uid=message.chat.id).first()
#     db.db_session.delete(order_id)
#     db.db_session.commit()
#     await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.\n–¢–∏—Å–Ω—ñ—Ç—å üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏ üëá",
#                          reply_markup=markup_user)

'''–í –∫–æ—Ä–∑–∏–Ω–µ –Ω–∞–ø–∏—Å–∞–ª —Ç–µ–∫—Å—Ç'''


@dp.message_handler(IsUser(), lambda message: message.text not in [all_right_message, back_message], state=CheckoutState.check_cart)
async def process_check_cart_invalid(message: Message):
    await message.reply('–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –Ω–µ –±—É–ª–æ.')

'''–ü—Ä–∏ –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–∞–∂–∞–ª –Ω–∞–∑–∞–¥'''


@dp.message_handler(IsUser(), text=back_message, state=CheckoutState.check_cart)
async def process_check_cart_back(message: Message, state: FSMContext):
    await state.finish()
    await process_cart(message, state)

'''–ü—Ä–∏ –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–∞–∂–∞–ª –ø–æ—Ç–≤–µ—Ä–¥–∏—Ç—å'''


@dp.message_handler(IsUser(), text=all_right_message, state=CheckoutState.check_cart)
async def process_check_cart_all_right(message: Message, state: FSMContext):
    await CheckoutState.next()
    await message.answer("–í–∫–∞–∂—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É üëá",
                         reply_markup=back_markup())

'''–ü—Ä–∏ –≤–≤–æ–¥–µ –∏–º–µ–Ω–∏ –Ω–∞–∂–∞–ª –Ω–∞–∑–∞–¥'''


@dp.message_handler(IsUser(), text=back_message, state=CheckoutState.name)
async def process_name_back(message: Message, state: FSMContext):
    await CheckoutState.check_cart.set()
    await checkout(message, state)

'''–ü—Ä–∏ –≤–≤–æ–¥–µ –∏–º–µ–Ω–∏ –≤–≤–µ–ª –∏–º—è'''


@dp.message_handler(IsUser(), state=CheckoutState.name)
async def process_name(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
        if 'address' in data.keys():
            #await confirm(message)
            await CheckoutState.confirm.set()
        else:
            await CheckoutState.next()
            await message.answer("üîπ–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ö–∏—î–≤—É –∫—É—Ä'—î—Ä–æ–º."
                                 "\nüîπ–ü–æ –ö–∏—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ —Ç–∞ –£–∫—Ä–∞—ó–Ω—ñ –ù–æ–≤–æ—é –ü–æ—à—Ç–æ—é."
                                 "\n"
                                 "\nüöö –í–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏ üëá",
                                 reply_markup=back_markup())

'''–ü—Ä–∏ –≤–≤–æ–¥–µ –∞–¥—Ä–µ—Å–∞ –Ω–∞–∂–∞–ª –Ω–∞–∑–∞–¥'''


@dp.message_handler(IsUser(), text=back_message, state=CheckoutState.address)
async def process_address_back(message: Message, state: FSMContext):

    async with state.proxy() as data:

        await message.answer("–ó–º—ñ–Ω–∏—Ç–∏ –Ω–æ–º–µ—Ä –∑ <b>" + data['name'] + '</b>?',
                             reply_markup=back_markup())

    await CheckoutState.name.set()

'''–ü—Ä–∏ –≤–≤–æ–¥–µ –∞–¥—Ä–µ—Å–∞ –≤–≤–µ–ª –∞–¥—Ä–µ—Å'''


@dp.message_handler(IsUser(), state=CheckoutState.address)
async def process_address(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['address'] = message.text
    await CheckoutState.next()
    await payout(message, state)

'''–û–ø–ª–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'''
async def payout(message, state):
    total_price = 0
    order_id = None
    async with state.proxy() as data:
        for product, ordered_product, _ in data['products'].values():
            ordered_product = db.db_session.query(
                Ordered_products).filter_by(id=ordered_product.id).first()
            tp = product.price

            total_price += tp * ordered_product.quantity
            order_id = ordered_product.order_id
            if total_price >= 1500:
                final_text = "–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ö–∏—î–≤—É –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞."
            else:
                final_text = "üîπ–î–æ—Å—Ç–∞–≤–∫–∞ –≤–ø—Ä–æ–¥–æ–≤–∂ –¥–Ω—è –ø–æ –ö–∏—î–≤—É 100 ‚Ç¥" \
                             "\nüî∏–£ —Ç–æ—á–Ω–æ –≤–∫–∞–∑–∞–Ω–∏–π —á–∞—Å –ø–æ –ö–∏—î–≤—É 220 ‚Ç¥" \
                             "\nüîπ–î–æ—Å—Ç–∞–≤–∫–∞ –≤–µ–ª–∏–∫–æ–≥–∞–±–∞—Ä–∏—Ç–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –≤—ñ–¥ 400 ‚Ç¥" \
                             "\n–î–æ–¥–∞–π—Ç–µ –¥–æ —Å—É–º–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏."

    await message.answer("–ü–µ—Ä–µ–π–¥–µ–º–æ –¥–æ –æ–ø–ª–∞—Ç–∏ üí∞\n"
                         "\n"
                         "–í –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ –≤–∫–∞–∂—ñ—Ç—å –≤–∞—à\n"
                         f"–Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üëâ  <b>{order_id}</b>\n"
                         f"–°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:  <b>{total_price}</b> ‚Ç¥ \n"
                         f"\n"
                         f"{final_text}"
                         f"\n–ü—ñ—Å–ª—è –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ø –æ–ø–ª–∞—Ç–∏–≤(–ª–∞)üëá",
                         reply_markup=payment_markup())

# @dp.message_handler(IsUser(), state=CheckoutState.payment)
# async def process_payment(message: Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['payment'] = message.text
#     await message.answer("–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å", reply_markup=confirm_markup())
#     await CheckoutState.next()


'''–ü–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'''

# async def confirm(message):
#     await confirm(message)
#     await message.answer('–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –≤—Å–µ –≤—ñ—Ä–Ω–æ —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.',
#                          reply_markup=confirm_markup())

'''–ü—Ä–∏ –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É'''


@dp.message_handler(IsUser(), lambda message: message.text not in [confirm_message, back_message], state=CheckoutState.confirm)
async def process_confirm_invalid(message: Message):
    await message.reply('–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –Ω–µ –±—É–ª–æ.')

'''–ü—Ä–∏ –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–∞–ª –Ω–∞–∑–∞–¥'''


@dp.message_handler(IsUser(), text=back_message, state=CheckoutState.confirm)
async def process_confirm(message: Message, state: FSMContext):
    await CheckoutState.address.set()
    async with state.proxy() as data:
        await message.answer('–ó–º—ñ–Ω–∏—Ç–∏ –∞–¥—Ä–µ—Å—É –∑ <b>' + data['address'] + '</b>?',
                             reply_markup=back_markup())

'''–ü–æ—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫–∞–∑'''


@dp.message_handler(IsUser(), text=confirm_message, state=CheckoutState.confirm)
async def process_confirm(message: Message, state: FSMContext):

    logger.info(
        f"User id - {message.from_user.id} name - {message.from_user.first_name} Deal was made.")
    user_name = message.from_user.first_name
    async with state.proxy() as data:
        cid = message.chat.id
        '''–í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∑–∞–∫–∞–∑ –º–µ–Ω—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å –∏ –¥–æ–±–æ–≤–ª—è–µ–º –∏–º—è –∏ –∞–¥—Ä–µ—Å'''
        order = db.db_session.query(Orders).filter(
            Orders.tg_uid == cid).filter(Orders.is_orderd == False).first()
        order.is_orderd = True
        order.usr_name = data['name']
        order.usr_address = data['address']
        db.db_session.commit()
        await message.answer("–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–µ ‚úÖ "
                             "\n–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫ –Ω–∞—à–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ üßë‚Äçüî¨", reply_markup=markup_user)

        products = data['products']

        order_id = None
        all_products = []
        products_sum = 0

        for i in products:
            i_data = products[i]
            db_products: Products = i_data[0]
            db_ordered_products: Ordered_products = i_data[1]
            db_orders: Orders = i_data[2]

            order_id = db_orders.id
            all_products.append(str(db_products.title))
            products_sum += int(db_products.price)

        answer = ''
        total_price = 0

        for product, ordered_product, _ in data['products'].values():
            ordered_product = db.db_session.query(
                    Ordered_products).filter_by(id=ordered_product.id).first()
            tp = product.price
            answer += f"<b>{product.title}</b>\n {ordered_product.quantity} —à—Ç. –ø–æ {product.price} ‚Ç¥\n"
            answer += f'<b>–†–∞–∑–æ–º - {tp * ordered_product.quantity} ‚Ç¥</b>\n'

            total_price += tp * ordered_product.quantity

        #await message.answer(f'{answer}\n–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_price} ‚Ç¥', reply_markup=check_markup())


        text = ("<b>–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</b>\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω:  <b>{data['name']}</b>\n"
                f"–Ü–º'—è:  <b>{user_name}</b>\n"
                f"–ê–¥—Ä–µ—Å–∞:  <b>{data['address']}</b>\n"
                f"–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:  <b>{order_id}</b>\n"
                f"–¢–æ–≤–∞—Ä–∏:  <b>{', '.join(answer)}</b>\n"
                f"–°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:  <b>{total_price}</b> ‚Ç¥")

        await bot.send_message(chat_id=952618057, text=text, parse_mode="HTML")

        for manager_id in managers:
            try:
                await bot.send_message(chat_id=manager_id, text=text, parse_mode="HTML")
            except:
                pass

    await state.finish()
